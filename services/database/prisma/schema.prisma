generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  patient
  doctor
  pharmacist
  admin
}

enum Gender {
  M
  F
  O
}

enum OrderStatus {
  pending
  confirmed
  processing
  shipped
  delivered
  cancelled
}

enum PaymentStatus {
  pending
  authorized
  paid
  failed
  refunded
}

enum PaymentMethod {
  credit_card
  debit_card
  pix
  bank_transfer
}

model User {
  id           String    @id @default(uuid()) @db.Uuid
  email        String    @unique
  passwordHash String    @map("password_hash")
  role         UserRole
  firstName    String    @map("first_name")
  lastName     String    @map("last_name")
  cpf          String?   @unique
  phone        String?
  gender       Gender?
  birthDate    DateTime? @map("birth_date") @db.Date
  createdAt    DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime  @updatedAt @map("updated_at") @db.Timestamptz

  // Relações
  addresses     Address[]
  orders        Order[]
  prescriptions Prescription[] @relation("PatientPrescriptions")
  doctorPrescriptions Prescription[] @relation("DoctorPrescriptions")

  @@map("users")
}

model Address {
  id           String   @id @default(uuid()) @db.Uuid
  userId       String   @map("user_id") @db.Uuid
  street       String
  number       String
  complement   String?
  neighborhood String
  city         String
  state        String
  postalCode   String   @map("postal_code")
  isDefault    Boolean  @default(false) @map("is_default")
  createdAt    DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt    DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relações
  user   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders Order[]

  @@map("addresses")
}

model Product {
  id                 String   @id @default(uuid()) @db.Uuid
  name               String
  description        String?
  price             Decimal  @db.Decimal(10, 2)
  stock             Int      @default(0)
  sku               String?  @unique
  barcode           String?  @unique
  brandId           String?  @map("brand_id") @db.Uuid
  categoryId        String?  @map("category_id") @db.Uuid
  requiresPrescription Boolean @default(false) @map("requires_prescription")
  isActive          Boolean  @default(true) @map("is_active")
  createdAt         DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relações
  orderItems       OrderItem[]
  prescriptionItems PrescriptionItem[]

  @@map("products")
}

model Order {
  id                String      @id @default(uuid()) @db.Uuid
  userId            String      @map("user_id") @db.Uuid
  status            OrderStatus @default(pending)
  totalAmount       Decimal     @map("total_amount") @db.Decimal(10, 2)
  shippingAddressId String      @map("shipping_address_id") @db.Uuid
  trackingCode      String?     @map("tracking_code")
  notes             String?
  createdAt         DateTime    @default(now()) @map("created_at") @db.Timestamptz
  updatedAt         DateTime    @updatedAt @map("updated_at") @db.Timestamptz

  // Relações
  user            User        @relation(fields: [userId], references: [id])
  shippingAddress Address     @relation(fields: [shippingAddressId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  @@map("orders")
}

model OrderItem {
  id         String   @id @default(uuid()) @db.Uuid
  orderId    String   @map("order_id") @db.Uuid
  productId  String   @map("product_id") @db.Uuid
  quantity   Int
  unitPrice  Decimal  @map("unit_price") @db.Decimal(10, 2)
  totalPrice Decimal  @map("total_price") @db.Decimal(10, 2)
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz

  // Relações
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
}

model Payment {
  id             String        @id @default(uuid()) @db.Uuid
  orderId        String        @map("order_id") @db.Uuid
  amount         Decimal       @db.Decimal(10, 2)
  paymentMethod  PaymentMethod @map("payment_method")
  status         PaymentStatus @default(pending)
  transactionId  String?       @map("transaction_id")
  paymentDetails Json?         @map("payment_details")
  createdAt      DateTime      @default(now()) @map("created_at") @db.Timestamptz
  updatedAt      DateTime      @updatedAt @map("updated_at") @db.Timestamptz

  // Relações
  order Order @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Prescription {
  id         String   @id @default(uuid()) @db.Uuid
  patientId  String   @map("patient_id") @db.Uuid
  doctorId   String   @map("doctor_id") @db.Uuid
  issueDate  DateTime @map("issue_date") @db.Date
  expiryDate DateTime? @map("expiry_date") @db.Date
  status     String
  notes      String?
  createdAt  DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt  DateTime @updatedAt @map("updated_at") @db.Timestamptz

  // Relações
  patient User @relation("PatientPrescriptions", fields: [patientId], references: [id])
  doctor  User @relation("DoctorPrescriptions", fields: [doctorId], references: [id])
  items   PrescriptionItem[]

  @@map("prescriptions")
}

model PrescriptionItem {
  id             String      @id @default(uuid()) @db.Uuid
  prescriptionId String      @map("prescription_id") @db.Uuid
  productId      String      @map("product_id") @db.Uuid
  dosage         String
  frequency      String
  duration       String?
  quantity       Int
  instructions   String?
  createdAt      DateTime    @default(now()) @map("created_at") @db.Timestamptz

  // Relações
  prescription Prescription @relation(fields: [prescriptionId], references: [id], onDelete: Cascade)
  product      Product      @relation(fields: [productId], references: [id])

  @@map("prescription_items")
} 